# .circleci/config.yml

# Specify the config version - version 2.1 is latest.
version: 2.1
# Specify Terraform version
orbs:
  terraform: circleci/terraform@3.1.0

parameters:
  service_name:
    default: FSharpTemplate
    type: string
  docker_name:
    default: fsharptemplate
    type: string
  terraform_env_config_file:
    default: na-ci.terraform.tfvars
    type: string

# Note: These are provided by the ayuda-acr context
# - AP_CONTAINER_REGISTRY_HOST
# - AP_CONTAINER_REGISTRY_PASSWORD
# - AP_CONTAINER_REGISTRY_USERNAME

# Note: These are provided by the ap-fsharp-template-resource-credentials-labs context
# - AZ_SERVICE_PRINCIPAL_APP_ID
# - AZ_SERVICE_PRINCIPAL_APP_PASSWORD

# Note: These are provided by the ap-fsharp-template-resource-credentials-preview context
# - AZ_SERVICE_PRINCIPAL_APP_ID
# - AZ_SERVICE_PRINCIPAL_APP_PASSWORD

# Note: These are provided by the ap-fsharp-template-resource-credentials-cloud context
# - AZ_SERVICE_PRINCIPAL_APP_ID
# - AZ_SERVICE_PRINCIPAL_APP_PASSWORD

# Note: These are provided by the az-resources-labs context
# - RESOURCE_GROUP_NAME
# - SERVICE_PLAN_NAME
# - AZ_SUBSCRIPTION_ID

# Note: These are provided by the az-resources-preview context
# - RESOURCE_GROUP_NAME
# - SERVICE_PLAN_NAME
# - AZ_SUBSCRIPTION_ID

# Note: These are provided by the az-resources context
# - AZ_TENANT
# - RESOURCE_GROUP_NAME
# - SERVICE_PLAN_NAME
# - AZ_SUBSCRIPTION_ID

# Define the jobs for the current project.
jobs:
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    resource_class: small
    steps:
      - checkout
      - run:
          name: Build
          command: dotnet build
          working_directory: << pipeline.parameters.service_name >>
      - run:
          name: Running Tests
          command: dotnet test
          working_directory: << pipeline.parameters.service_name >>

#  other-unit-tests:
#    ToDo
#  integration-tests:
#    ToDo

  build_image:
    docker:
      - image: circleci/buildpack-deps:latest
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker login
          command: echo $AP_CONTAINER_REGISTRY_PASSWORD | docker login $AP_CONTAINER_REGISTRY_HOST -u $AP_CONTAINER_REGISTRY_USERNAME --password-stdin
      - run:
          name: Build image
          command: docker build --tag << pipeline.parameters.docker_name >>:build-<< pipeline.number >> --tag << pipeline.parameters.docker_name >>:latest .
      - run:
          name: Save Docker image
          command: docker save -o << pipeline.parameters.docker_name >>_latest.tar "<< pipeline.parameters.docker_name >>:build-<< pipeline.number >>"
      - persist_to_workspace:
          root: .
          paths:
            - << pipeline.parameters.docker_name >>_latest.tar

  push_image:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - attach_workspace:
          at: ./
      - setup_remote_docker
      - run:
          name: Docker login
          command: echo $AP_CONTAINER_REGISTRY_PASSWORD | docker login $AP_CONTAINER_REGISTRY_HOST -u $AP_CONTAINER_REGISTRY_USERNAME --password-stdin
      - run:
          name: Load Docker image
          command: docker load -i ./<< pipeline.parameters.docker_name >>_latest.tar
      - run:
          name: Tag image with build number
          command: docker tag << pipeline.parameters.docker_name >>:build-<< pipeline.number >> "$AP_CONTAINER_REGISTRY_HOST/<< pipeline.parameters.docker_name >>:build-<< pipeline.number >>"
      - run:
          name: Tag image latest
          command: docker tag << pipeline.parameters.docker_name >>:build-<< pipeline.number >> "$AP_CONTAINER_REGISTRY_HOST/<< pipeline.parameters.docker_name >>:latest"
      - run:
          name: Push image
          command: docker push "$AP_CONTAINER_REGISTRY_HOST/<< pipeline.parameters.docker_name >>:build-<< pipeline.number >>"
      - run:
          name: Push image as latest
          command: docker push "$AP_CONTAINER_REGISTRY_HOST/<< pipeline.parameters.docker_name >>:latest"

  terraform-single-job-labs:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    resource_class: small
    steps:
      - checkout
      - run:
          name: terraform plan & apply infrastructure
          command: |
            cd '/tmp/project/<< pipeline.parameters.service_name >>/Terraform'
            TERRAFORM_ENV_CONFIG_FILE=<< pipeline.parameters.terraform_env_config_file >>
            terraform init
            terraform validate
            cat >> /tmp/project/<< pipeline.parameters.service_name >>/Terraform/$TERRAFORM_ENV_CONFIG_FILE \<< END
            azure_subscription_id = "$AZ_SUBSCRIPTION_ID"
            azure_subscription_tenant_id = "$AZ_TENANT"
            service_principal_appid = "$AZ_SERVICE_PRINCIPAL_APP_ID"
            service_principal_password = "$AZ_SERVICE_PRINCIPAL_APP_PASSWORD"
            END
            terraform import -var-file="$TERRAFORM_ENV_CONFIG_FILE" azurerm_resource_group.rg /subscriptions/$AZ_SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME
            terraform import -var-file="$TERRAFORM_ENV_CONFIG_FILE" azurerm_service_plan.sp /subscriptions/$AZ_SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME/providers/Microsoft.Web/serverfarms/$SERVICE_PLAN_NAME            
            terraform plan -var-file="$TERRAFORM_ENV_CONFIG_FILE"
            terraform apply -auto-approve -var-file="$TERRAFORM_ENV_CONFIG_FILE"

workflows:
  deploy_infrastructure:
    jobs:
      - build
      - build_image:
          context:
              - ayuda-acr
          requires:
            - build
      - push_image:
          context:
            - ayuda-acr
          requires:
            - build_image
#      - terraform-single-job-labs:
#          requires:
#            - push_image
#          context:
#            - az-resources
#            - az-resources-labs
#            - ap-fsharp-template-resource-credentials-labs